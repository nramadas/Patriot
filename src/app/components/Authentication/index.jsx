import './index.less';
import React from 'react';
import { connect } from 'react-redux';
import { createSelector } from 'reselect';

import cx from 'lib/cx';
import * as authenticationActions from 'app/actions/authentication';

const T = React.PropTypes;

export class Authentication extends React.Component {
  static propTypes = {
    errors: T.object,
    errorsArray: T.arrayOf(T.object),
    onRegister: T.func,
    onLogin: T.func,
  };

  static defaultProps = {
    errors: {},
    errorsArray: [],
    onRegister: () => {},
    onLogin: () => {},
  };

  constructor(props) {
    super(props);

    this.state = {
      showLogin: true,
      username: '',
      password: '',
      passwordConfirmation: '',
    };
  }

  handleFormField(type, val) {
    this.setState({ [type]: val });
  }

  swapForms() {
    this.setState({
      showLogin: !this.state.showLogin,
      password: '',
      passwordConfirmation: '',
    });
  }

  submitForm() {
    const { onLogin, onRegister } = this.props;
    const { showLogin, username, password, passwordConfirmation } = this.state;

    return showLogin
      ? onLogin(username, password)
      : onRegister(username, password, passwordConfirmation);
  }

  render() {
    const { showLogin } = this.state;

    return (
      <div className='Authentication'>
        <div className='Authentication__left'>
          <div className='Authentication__title'>Patriot</div>
          <div className='Authentication__forms'>
            { showLogin ? this.renderLogin() : this.renderRegister() }
          </div>
        </div>
        <div className='Authentication__right'>
          <div className='Authentication__why'>Why use Patriot?</div>
          { this.renderPerk(
            'Client-side encryption',
            'Messages are encrypted in your browser before they are sent',
            'and the private keys are never stored on the server.',
            'You don\'t need to worry about messages being intercepted',
            'or our servers being compromised.',
          ) }
          { this.renderPerk(
            'Ephemeral keys',
            'New keys are generated by the browser each session, so there is',
            'less chance of stolen keys affecting your privacy.',
          ) }
          { this.renderPerk(
            'Be a good patriot',
            'Privacy is important to the maintaince of a free world. You',
            'can do your part to help keep your country free by making your',
            'communications private.',
          ) }
        </div>
      </div>
    );
  }

  renderLogin() {
    const { errorsArray } = this.props;

    return (
      <div className='Authentication__login'>
        { this.renderInput('username', 'text', 'Username') }
        { this.renderInput('password', 'password', 'Password') }
        { errorsArray.length ? this.renderErrors() : null }
        { this.renderButton('Login') }
        { this.renderFormSwap('Don\'t have a account? Click here to register.') }
      </div>
    );
  }

  renderRegister() {
    const { errorsArray } = this.props;

    return (
      <div className='Authentication__register'>
        { this.renderInput('username', 'text', 'Username') }
        { this.renderInput('password', 'password', 'Password') }
        { this.renderInput('passwordConfirmation', 'password', 'Confirm Password') }
        { errorsArray.length ? this.renderErrors() : null }
        { this.renderButton('Register') }
        { this.renderFormSwap('Already have an account? Click here to login.') }
      </div>
    );
  }

  renderInput(name, type, placeholder) {
    const { errors } = this.props;

    return (
      <input
        className={ cx('Authentication__input', {
          'm-error': !!errors[name],
        }) }
        placeholder={ placeholder }
        type={ type }
        onChange={ e => this.handleFormField(name, e.currentTarget.value) }
      />
    );
  }

  renderErrors() {
    const { errorsArray } = this.props;

    return (
      <div className='Authentication__errors'>
        { errorsArray.map(e => e.msg).join('. ') }
      </div>
    );
  }

  renderButton(text) {
    return (
      <div className='Authentication__button' onClick={ e => this.submitForm() }>
        { text }
      </div>
    );
  }

  renderFormSwap(text) {
    return (
      <div className='Authentication__switchForm' onClick={ e => this.swapForms() }>
        { text }
      </div>
    );
  }

  renderPerk(title, ...explanation) {
    return (
      <div className='Authentication__perk'>
        <div className='Authentication__perkTitle'>{ title }</div>
        <div className='Authentication__perkExplanation'>{ explanation.join(' ') }</div>
      </div>
    );
  }
}

const selector = createSelector(
  state => state.user.validationErrors,
  errors => ({
    errors: (errors || []).reduce((prev, { field, msg}) => ({
      ...prev,
      [field]: msg,
    }), {}),
    errorsArray: errors || [],
  })
);

const dispatcher = dispatch => ({
  onRegister: (username, password, passwordConfirmation) =>
    dispatch(authenticationActions.register(username, password, passwordConfirmation)),
  onLogin: (username, password) =>
    dispatch(authenticationActions.login(username, password)),
});

export default connect(selector, dispatcher)(Authentication);
